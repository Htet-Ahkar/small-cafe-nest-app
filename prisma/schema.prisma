// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// 1st start database: npm run db:dev:up
// 2nd run migration: npx prisma migrate dev --name init
// 3rd remove database: npm run db:dev:rm
// or just run: npm run prisma:dev:migrate

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // login credentials
  email String @unique
  hash  String

  // data
  userName    String?
  firstName   String?
  lastName    String?
  isAavilable Boolean @default(false)

  categories Category[]
  products   Product[]

  @@map("users")
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // data
  name        String  @unique
  type        String?
  description String?

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  products Product[]

  @@map("categories")
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // data
  name        String
  unit        UnitType    @default(PIECE)
  price       Float       @default(0.00)
  trackStock  Boolean     @default(false)
  stock       Int         @default(0)
  bundleItems String      @default("[]")
  type        ProductType @default(STANDALONE)
  description String?
  imageLink   String?

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  categoryId Int
  category   Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  OrderItem  OrderItem[]

  @@map("products")
}

enum ProductType {
  BUNDLE
  BUNDLE_ITEM
  STANDALONE
}

enum UnitType {
  PIECE
  PACK
  BOX
  SET
  CUP
  SLICE
}

model Table {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tableName   String      @unique
  status      TableStatus @default(AVAILABLE)
  description String?

  orders Order[]

  @@map("tables")
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status        OrderStatus   @default(PENDING)
  paymentMethod PaymentMethod @default(CASH)
  subtotal      Float // Before taxes and discounts
  // discount      Float? // Discount amount 
  // tax           Float? // Tax amount
  totalPrice    Float // Final price after tax and discount
  description   String?
  completedAt   DateTime?

  tableId Int
  table   Table @relation(fields: [tableId], references: [id])

  OrderItems OrderItem[]

  @@map("orders")
}

enum PaymentMethod {
  CASH
  CARD
  MOBILE_PAYMENT
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELED
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  quantity Int
  price    Float

  orderId Int
  order   Order @relation(fields: [orderId], references: [id])

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  @@map("orderItems")
}
